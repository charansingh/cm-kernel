***************
*** 36,41 ****
  #include <linux/jiffies.h>
  #include <linux/lightsensor.h>
  #include <linux/earlysuspend.h>
  #include <mach/board-htcleo-microp.h>
  
  #include "board-htcleo.h"
--- 36,42 ----
  #include <linux/jiffies.h>
  #include <linux/lightsensor.h>
  #include <linux/earlysuspend.h>
+ #include <linux/capella_cm3602_htc.h>
  #include <mach/board-htcleo-microp.h>
  
  #include "board-htcleo.h"
***************
*** 54,59 ****
  // pr_info(x)
  
  
  static uint16_t lsensor_adc_table[10] = 
  {
  
--- 55,99 ----
  // pr_info(x)
  
  
+ static int __capella_cm3602_power(int on)
+ {
+ 	printk(KERN_DEBUG "%s: Turn the capella_cm3602 power %s\n",
+ 		__func__, (on) ? "on" : "off");
+ 	if (on) {
+ 		gpio_direction_output(HTCLEO_GPIO_LS_EN_N, 0);
+ 		gpio_direction_output(HTCLEO_GPIO_PROXIMITY_EN, 1);
+ 	} else {
+ 		gpio_direction_output(HTCLEO_GPIO_LS_EN_N, 1);
+ 	}
+ 	return 0;
+ };
+ 
+ static DEFINE_MUTEX(capella_cm3602_lock);
+ static int als_power_control;
+ 
+ static int capella_cm3602_power(int pwr_device, uint8_t enable)
+ {
+ 	/* TODO eolsen Add Voltage reg control */
+ 	unsigned int old_status = 0;
+ 	int ret = 0, on = 0;
+ 	mutex_lock(&capella_cm3602_lock);
+ 
+ 	old_status = als_power_control;
+ 	if (enable)
+ 		als_power_control |= pwr_device;
+ 	else
+ 		als_power_control &= ~pwr_device;
+ 
+ 	on = als_power_control ? 1 : 0;
+ 	if (old_status == 0 && on)
+ 		ret = __capella_cm3602_power(1);
+ 	else if (!on)
+ 		ret = __capella_cm3602_power(0);
+ 
+ 	mutex_unlock(&capella_cm3602_lock);
+ 	return ret;
+ };
+ 
  static uint16_t lsensor_adc_table[10] = 
  {
  
